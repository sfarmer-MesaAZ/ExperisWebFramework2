/* ================================
 * Global Variables
 * ================================ */
 // Override these in your _base.scss partial if necessary
$page-max-width: 960px !default;
$col-count: 16 !default;
$col-gutter: 2% !default;

/* ================================
 * Functions
 * ================================ */

/*
 * @function: get-width-without-gutters (number[, number])
 * Desc: Returns the width (%) of all columns/cells in a full-width block
 *       excluding the gutters.
 * $col-per-row: The number of columns/cells in the full-width block.
 * $gutter-width (optional): Width (%) of gutters.
 */
@function get-width-without-gutters ($cols-per-row, $gutter-width: $col-gutter) {
	@return 100% - (($cols-per-row - 1) * $gutter-width);
}

/*
 * @function: get-column-width (number[, number, number])
 * Desc: Returns the width (%) of a cell based on the number of columns
 *       it spans.
 * $col-span: How many column lengths this cell will span across.
 * $custom-col-count (optional): The total number of columns in the row.
 * $gutter-width (optional): Width (%) of gutters.
 */
@function get-column-width ($col-span, $custom-col-count: $col-count, $gutter-width: $col-gutter) {
	$single-col-width: (100% - ($custom-col-count - 1) * $gutter-width) / $custom-col-count;
	@return $single-col-width * $col-span + ($col-span - 1) * $gutter-width;
}

/* ================================
 * Mixins
 * ================================ */

/*
 * @mixin: grid (number[, number])
 * Desc: Formats direct child elements as equal-width cells in a single-
 *       or multi-row grid.
 * $cols: The number of cells per row.
 * $gutter-width (optional): Width (%) of gutters.
 */
@mixin grid ($cols, $gutter-width: $col-gutter) {
	$first-column-cell: #{$cols}n-#{$cols - 1};
	$last-column-cell: #{$cols}n;
	$last-row: -n + #{$cols};

	display: block;
	box-sizing: border-box;
	-moz-box-sizing: border-box;

	&:before {
		content: '';
		display: table;
		line-height: 0;
	}
	&:after {
		content: '';
		display: table;
		line-height: 0;
		clear: both;
	}
	> * {
		&:nth-child(1n) {
			clear: none;
			float: left;
			box-sizing: border-box;
			-moz-box-sizing: border-box;

			margin-right: $gutter-width;
			margin-bottom: $gutter-width;
			width: 1 / $cols * get-width-without-gutters($cols, $gutter-width);
		}

		// First cell of each row should clear cells above
		&:nth-child(#{$first-column-cell}) {
			clear: both;
		}

		// No right margin on last cell of each row
		&:nth-child(#{$last-column-cell}) {
			float: right;
			margin-right: 0;
		}

		// No bottom margin on last row
		&:nth-last-child(#{$last-row}) {
			margin-bottom: 0;
		}
	}
}

/*
 * @mixin: row
 * Desc: Creates a full-width block that will act as a wrapper for a row
 *       of cells.
 */
@mixin row () {
	display: block;
	box-sizing: border-box;
	-moz-box-sizing: border-box;

	&:before {
		content: '';
		display: table;
		line-height: 0;
	}
	&:after {
		content: '';
		display: table;
		line-height: 0;
		clear: both;
	}
}

/*
 * @mixin column (number[, number, number])
 * Desc: Formats element as a column within a row (expected to be a
 *       direct descendent of row).
 * $col-span: How many column lengths this cell will span across.
 * $custom-col-count (optional): The total number of columns in the row.
 * $gutter-width (optional): Width (%) of gutters.
 */
@mixin column ($col-span, $custom-col-count: $col-count, $gutter-width: $col-gutter) {
	float: left;
	box-sizing: border-box;
	-moz-box-sizing: border-box;

	margin-right: $gutter-width;
	width: get-column-width($col-span, $custom-col-count, $gutter-width);

	&:last-child {
		float: right;
		margin-right: 0;
	}
	&:first-child:last-child {
		float: left;
	}
}

/* @mixin center-column
 * Desc: If a row contains a single column, it can be centered with this mixin.
 *       Make sure to apply the column mixin first.
 */
@mixin center-column {
	&:last-child {
		float: none;
		margin: 0 auto;
	}
}

/* @mixin convert-to-single-cols ([margin value])
 * Desc: Converts the columns in a row or grid to full-width columns.
 * $margin (optional): The margins for the child elements
 */
@mixin convert-to-single-cols ($margin: 1em 0) {
	> * {
		margin: $margin !important;
		float: none !important;
		width: 100% !important;
	}
}
